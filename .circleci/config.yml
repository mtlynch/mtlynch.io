version: 2.1
jobs:
  check_whitespace:
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - checkout
      - run:
          name: Check for trailing whitespace
          command: ./dev-scripts/check-trailing-whitespace
      - run:
          name: Check for trailing newlines
          command: ./dev-scripts/check-trailing-newline
  check_html_format:
    docker:
      - image: cimg/node:18.14.1
    steps:
      - checkout
      - run:
          name: Download npm packages
          command: npm install
      - run:
          name: Check formatting
          command: ./dev-scripts/check-formatting
  lint_markdown:
    docker:
      - image: davidanson/markdownlint-cli2:v0.17.2
    steps:
      - checkout
      - run:
          name: Lint Markdown
          command: ./dev-scripts/lint-markdown
  check_duplicate_words:
    docker:
      - image: nixos/nix:2.26.1
    steps:
      - checkout
      - run:
          name: Install wordword
          command: |
            nix \
              --extra-experimental-features 'nix-command flakes' \
              profile \
              install git+https://codeberg.org/mtlynch/wordword
      - run:
          name: Verify wordword installation
          command: wordword --version
      - run:
          name: Check for duplicate words
          command: wordword --verbose ./content
  check_exif_data:
    docker:
      - image: davidanson/exiftool:v13.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: apk add bash git
      - run:
          name: Check EXIF data
          command: |
            export PATH="/extract/Image-ExifTool-13.10:${PATH}"

            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              echo "On "${CIRCLE_BRANCH}" branch, checking all content files..."
              ./dev-scripts/check-exif-data ./content/
            else
              echo "On branch ${CIRCLE_BRANCH}, checking only changed files..."

              # Get changed files in content directory
              changed_files=$(git diff --name-only origin/master...HEAD | grep '^content/' || true)

              if [ -n "${changed_files}" ]; then
                echo "Changed files in content directory:"
                echo "${changed_files}"
                echo ""

                # Convert newline-separated list to space-separated arguments
                # shellcheck disable=SC2086
                ./dev-scripts/check-exif-data ${changed_files}
              else
                echo "No content files changed compared to master"
                echo "âœ… SUCCESS: No content files to check"
              fi
            fi
  build:
    docker:
      - image: hugomods/hugo:0.147.5
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - restore_cache:
          keys:
            - resources-gen-v{{ .Environment.RESOURCES_CACHE_VERSION }}
      - run:
          name: Build site
          command: |
            hugo version
            if [[ "$CIRCLE_BRANCH" != "master" ]]; then
              export HUGO_ENV=dev
            fi
            hugo --minify
      - persist_to_workspace:
          root: ./
          paths:
            - dev-scripts
            - public
            - netlify.toml
      - save_cache:
          key: resources-gen-v{{ .Environment.RESOURCES_CACHE_VERSION }}
          paths:
            - resources
  lint_html:
    docker:
      - image: mtlynch/htmlproofer:5.0.6
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Check HTML and external links
          command: ./dev-scripts/lint-html
  lint_xml:
    docker:
      - image: alpine:3.21.2
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Install bash and xmllint
          command: apk add bash libxml2-utils
      - run:
          name: Lint XML
          command: ./dev-scripts/lint-xml
  check_seo_metadata:
    docker:
      - image: cimg/base:2020.01
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Check that SEO meta tags rendered properly
          command: ./dev-scripts/check-seo-metadata
  publish_draft:
    docker:
      - image: cimg/node:18.14.1
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      # This is a hack to get rid of the <base> tag, which prevents the blog from rendering
      # properly on Netlify's draft URL because it hardcodes the mtlynch.io domain.
      - run:
          name: Remove base tag from generated HTML
          command: find public -name "*.html" -exec sed -i -e 's/<base[^>]*>//g' {} +
      - run:
          name: Install netlify CLI
          command: npm install netlify-cli --save-dev
      - run:
          name: Deploy a live draft
          command: ./node_modules/.bin/netlify deploy --dir=public --site="${NETLIFY_SITE_ID}"
  deploy:
    docker:
      - image: cimg/node:18.14.1
    resource_class: small
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Install netlify CLI
          command: npm install netlify-cli --save-dev
      - run:
          name: Deploy to production
          command: ./node_modules/.bin/netlify deploy --dir=public --site="${NETLIFY_SITE_ID}" --prod
workflows:
  version: 2
  test_deploy:
    jobs:
      - check_whitespace
      - check_html_format
      - lint_markdown
      - check_duplicate_words
      - check_exif_data
      - build
      - lint_html:
          requires:
            - build
      - lint_xml:
          requires:
            - build
      - check_seo_metadata:
          requires:
            - build
      - publish_draft:
          requires:
            - build
          filters:
            branches:
              ignore: master
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
